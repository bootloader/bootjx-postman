package com.boot.jx.postman.model;

import java.io.Serializable;

import org.apache.commons.io.FilenameUtils;

import com.boot.jx.model.CommonFile;
import com.boot.jx.swagger.ApiMockModelProperty;
import com.boot.utils.ArgUtil;
import com.boot.utils.Constants;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@JsonIgnoreProperties(ignoreUnknown = true)
public class Attachment implements Serializable {
	private static final long serialVersionUID = 6420347322076291226L;

	@ApiMockModelProperty(example = "IMAGE", value = "Media Type",
			allowableValues = "IMAGE,DOCUMENT,TEXT,PDF,VIDEO,URL")
	String mediaType;

	@ApiMockModelProperty(example = "IMAGE", value = "Media SubType Type", allowableValues = "STORY_MENTION,SHARE etc")
	String mediaSubType;

	@ApiMockModelProperty(example = "image/png", value = "Mime Type")
	String mediaMimeType;

	@ApiMockModelProperty(example = "12", value = "Media ID generated by Service")
	String mediaId;

	@ApiMockModelProperty(example = "https://client.service.com/docs/media/12.png",
			value = "Media URL generated by Channel")
	String mediaSrc;

	@ApiMockModelProperty(example = "https://client.service.com/docs/media/12.png",
			value = "Media URL generated by Service")
	String mediaURL;

	@ApiMockModelProperty(example = "Transaction Receipt", value = "Media Caption")
	String mediaCaption;

	@ApiMockModelProperty(example = "TransactionReceipt.pdf", value = "File Name")
	String mediaName;

	@ApiMockModelProperty(example = "ABC_PROMO", value = "QuickMedia Code")
	String mediaCode;

	public String getMediaURL() {
		return mediaURL;
	}

	public void setMediaURL(String mediaURL) {
		this.mediaURL = mediaURL;
	}

	public Attachment mediaURL(String mediaURL) {
		this.mediaURL = mediaURL;
		if (!ArgUtil.is(this.mediaName)) {
			this.mediaName = FilenameUtils.getName(mediaURL);
		}
		return this;
	}

	public Attachment mediaId(String mediaId) {
		this.mediaId = mediaId;
		return this;
	}

	public Attachment mediaType(Object mediaTypeLocal) {
		this.mediaType = ArgUtil.parseAsString(mediaTypeLocal);
		return this;
	}

	public Attachment mediaSubType(Object mediaSubType) {
		this.mediaSubType = ArgUtil.parseAsString(mediaSubType, Constants.BLANK).toUpperCase();
		return this;
	}

	public Attachment mediaMimeType(Object mediaMimeTypeLocal) {
		this.mediaMimeType = ArgUtil.parseAsString(mediaMimeTypeLocal);
		return this;
	}

	public Attachment mediaCaption(String mediaCaption) {
		this.mediaCaption = mediaCaption;
		return this;
	}

	public Attachment mediaSrc(String mediaSrc) {
		this.mediaSrc = mediaSrc;
		return this;
	}

	public Attachment mediaName(String mediaName) {
		this.mediaName = mediaName;
		return this;
	}

	public String getMediaType() {
		if (!ArgUtil.is(this.mediaType) && ArgUtil.is(this.mediaURL)) {
			this.mediaType = ArgUtil.parseAsString(new CommonFile().url(this.mediaURL).getFileType());
		}
		return this.mediaType;
	}

	public void setMediaType(String mediaType) {
		this.mediaType = mediaType;
	}

	public String getMediaId() {
		return mediaId;
	}

	public void setMediaId(String mediaId) {
		this.mediaId = mediaId;
	}

	public String getMediaCaption() {
		return mediaCaption;
	}

	public void setMediaCaption(String mediaCaption) {
		this.mediaCaption = mediaCaption;
	}

	public String getMediaSrc() {
		return mediaSrc;
	}

	public void setMediaSrc(String mediaSrc) {
		this.mediaSrc = mediaSrc;
	}

	public String getMediaName() {
		return mediaName;
	}

	public void setMediaName(String mediaName) {
		this.mediaName = mediaName;
	}

	public String getMediaMimeType() {
		return mediaMimeType;
	}

	public void setMediaMimeType(String mediaMimeType) {
		this.mediaMimeType = mediaMimeType;
	}

	public String getMediaSubType() {
		return mediaSubType;
	}

	public void setMediaSubType(String mediaSubType) {
		this.mediaSubType = mediaSubType;
	}

	public String getMediaCode() {
		return mediaCode;
	}

	public void setMediaCode(String mediaCode) {
		this.mediaCode = mediaCode;
	}

}
